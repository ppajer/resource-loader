{
  "name": "resource-loader.js",
  "tagline": "A lightweight and straightforward resource loader written in JavaScript.",
  "body": "# resource-loader\r\n\r\nThis lightweight JavaScript resource loader aims to be as unobtrusive and straightforward as possible both in its goal and use. It can handle loading all types of resources during or after the page has loaded and can preload resources on the fly if needed.\r\n\r\n>###Important\r\n>Most browsers don't cache resources by default unless instructed to. Unfortunately this cannot be done on the client side, so to get\r\n>the most out of this library, you need to implement sending cache headers along with your assets. This can be done by configuring your \r\n>server appropriately or sending the headers through your server-side language of choice.\r\n\r\n## How it works\r\n**TLDR: it's magic and just works.**\r\n\r\nResources are considered \"loaded\" when they are stored in the browser's memory. Resources are referenced by URLs. To load a resource by URL, the browser will first attempt to load it from its cache and will only download the URL's content if it fails to find it. Cached resources are loaded from disk instead of over the network, so they appear to be loaded near-instantly. This resource loader works by silently forcing the browser to download external resources in the background and caching them, allowing you to benefit from the speed of cache loading when you reference them by the same URL.\r\n\r\n## Resource types\r\n\r\nThis library supports the following resource types: **script**, **style**, **image**, **audio**, **video**. Although general support for these types of assets is provided across browsers, individual MIME type support is subject to browser implementation differences. **Audio** and **video** types require a HTML5 compliant browser and a `DOCTYPE` in order to function as expected.\r\n\r\n>###Note for preloading HTML5 Video\r\n>This library uses the HTML5 Video API to preload videos, but cannot guarantee that the video format provided is supported by the\r\n>current browser. This means you need to take care of determining which video formats are supported and select your assets to preload \r\n>accordingly. If you supply an unsupported video format, the loader will not complain, but the browser will.\r\n\r\n## Installation\r\nSimply include `resource-loader.js` in your document and create an instance of `ResourceLoader` with your preferred configuration. If you keep a reference to this object, you will be able to reuse it later on without having to instantialize a new one.\r\n\r\n#### Config options\r\n\r\n- **resources**: An array of objects, each with a `type` property with a value of `image`, `css` or `js` and an URL to reference the resource by. Possible values: `Array`, `undefined`. Default: `[]`.\r\n- **onReady**: A boolean indicating if the resources need to be loaded as soon as the DOM is ready or after content has loaded. Possible values: `true`, `false`, `undefined`. Default: `true`.\r\n- **errors**: A boolean indicating whether the loader should throw hard errors or simply log them to the console while ignoring them. Possible values: `true`, `false`, `undefined`. Default: `true`.\r\n\r\n## Full example\r\n```html\r\n<html>\r\n  <head>\r\n    <title>ResourceLoader Example</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"yourPageContent\">\r\n      ...\r\n    </div>\r\n    <script type=\"text/javascript\" src=\"resource-loader.js\"></script>\r\n    <script type=\"text/javascript\">\r\n      var resources = [\r\n                        {\r\n                          \"type\": \"image\",  \r\n                          \"url\": \"path/to/image\"\r\n                        },\r\n                        {\r\n                          \"type\": \"css\",\r\n                          \"url\": \"path/to/stylesheet\"\r\n                        }\r\n                      ],\r\n          config = {\r\n            \"resources\" : resources,\r\n            \"onReady\"   : false, // Load resources after window has finished loading.\r\n            \"errors\"    : false // Disable hard errors\r\n          },\r\n          \r\n          // Keep reference to object and automatically preload selected resources.\r\n          loader = new ResourceLoader(config);\r\n          \r\n          // Use the same instance to load new resources on the go.\r\n          var newResource = {\r\n                              \"type\": \"js\",\r\n                              \"url\": \"path/to/js\"\r\n                            };\r\n          loader.load(newResource);\r\n    </script>\r\n  </body>\r\n  \r\n</html>\r\n```\r\n\r\n## Roadmap\r\nThis project is planned to introduce more features such as DOM element returns and AJAX loading in the future.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}